---
title: "populacija"
output: pdf_document
date: "2024-12-28"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(ggplot2)
```

```{r}
n_low <- 100000
n_high <- 100000

risk_low_nought_1 <- 0.0001
risk_low_nought_2 <- 0.0001
risk_low_nought_2_excl <- risk_low_nought_1 + risk_low_nought_2
risk_low_nought_3 <- 0.00001
risk_low_nought_3_excl <- risk_low_nought_2_excl + risk_low_nought_3
risk_low_nought_A <- 0.000001
risk_low_nought_A_excl <- risk_low_nought_3_excl + risk_low_nought_A
risk_low_1_2 <- 0.0001
risk_low_1_3 <- 0.00005
risk_low_1_3_excl <- risk_low_1_2 + risk_low_1_3
risk_low_1_A <- 0.00002
risk_low_1_A_excl <- risk_low_1_3_excl + risk_low_1_A
risk_low_2_3 <- 0.0005
risk_low_2_A <- 0.0001
risk_low_2_A_excl <- risk_low_2_3 + risk_low_2_A
risk_low_3_A <- 0.001
risk_low_A_B <- 0.05
risk_low_B_C <- 0.07
risk_low_C_D <- 0.09

risk_high_nought_1 <- 0.0002
risk_high_nought_2 <- 0.0002
risk_high_nought_2_excl <- risk_high_nought_1 + risk_high_nought_2
risk_high_nought_3 <- 0.00002
risk_high_nought_3_excl <- risk_high_nought_2_excl + risk_high_nought_3
risk_high_nought_A <- 0.000002
risk_high_nought_A_excl <- risk_high_nought_3_excl + risk_high_nought_A
risk_high_1_2 <- 0.0002
risk_high_1_3 <- 0.0001
risk_high_1_3_excl <- risk_high_1_2 + risk_high_1_3
risk_high_1_A <- 0.00004
risk_high_1_A_excl <- risk_high_1_3_excl + risk_high_1_A
risk_high_2_3 <- 0.001
risk_high_2_A <- 0.0002
risk_high_2_A_excl <- risk_high_2_3 + risk_high_2_A
risk_high_3_A <- 0.002
risk_high_A_B <- 0.1
risk_high_B_C <- 0.14
risk_high_C_D <- 0.18

risk_D_death <- 0.2
risk_death <- 0.07
risk_birth <- 0.07

options <- c("low_nought", "high_nought", "low_1", "low_2", "low_3", "low_A", "low_B", "low_C", "low_D", "high_1", "high_2", "high_3", "high_A", "high_B", "high_C", "high_D", "dead_AC", "dead_other")
```

```{r}
change_status_function <- function(status){
  status_copy <- status
  
  for (i in 1:length(status)){
    random_death <- runif(1)
    
    if (random_death < risk_death){
      status_copy[i] <- "dead_other"
    } else {
      random <- runif(1)
      if (status[i]=="low_nought"){
        if (random < risk_low_nought_1){
          status_copy[i] <- "low_1"
        } else if (random < (risk_low_nought_2_excl)){
          status_copy[i] <- "low_2"
        } else if (random < (risk_low_nought_3_excl)){
          status_copy[i] <- "low_3"
        } else if (random < (risk_low_nought_A_excl)){
          status_copy[i] <- "low_A"
        }
      } else if (status[i]=="low_1"){
          if (random < risk_low_1_2){
            status_copy[i] <- "low_2"
          } else if (random < (risk_low_1_3_excl)){
            status_copy[i] <- "low_3"
          } else if (random < (risk_low_1_A_excl)){
            status_copy[i] <- "low_A"
          }
      } else if (status[i]=="low_2"){
          if (random < risk_low_2_3){
            status_copy[i] <- "low_3"
          } else if (random < (risk_low_2_A_excl)){
            status_copy[i] <- "low_A"
          } 
      } else if (status[i]=="low_3"){
          if (random < risk_low_3_A){
            status_copy[i] <- "low_A"
        }
      } else if (status[i]=="low_A"){
          if (random < risk_low_A_B){
            status_copy[i] <- "low_B"
          }
      } else if (status[i]=="low_B"){
          if (random < risk_low_B_C){
            status_copy[i] <- "low_C"
          }
      } else if (status[i]=="low_C"){
          if (random < risk_low_C_D){
            status_copy[i] <- "low_D"
          }
      } else if (status[i]=="low_D"){
          if (random < risk_D_death){
            status_copy[i] <- "dead_AC"
          }
      } else if (status[i]=="high_nought"){
          if (random < risk_high_nought_1){
            status_copy[i] <- "high_1"
          } else if (random < (risk_high_nought_2_excl)){
            status_copy[i] <- "high_2"
          } else if (random < (risk_high_nought_3_excl)){
            status_copy[i] <- "high_3"
          } else if (random < (risk_high_nought_A_excl)){
            status_copy[i] <- "high_A"
          }
      } else if (status[i]=="high_1"){
          if (random < risk_high_1_2){
            status_copy[i] <- "high_2"
          } else if (random < (risk_high_1_3_excl)){
            status_copy[i] <- "high_3"
          } else if (random < (risk_high_1_A_excl)){
            status_copy[i] <- "high_A"
          }
      } else if (status[i]=="high_2"){
          if (random < risk_high_2_3){
            status_copy[i] <- "high_3"
          } else if (random < (risk_high_2_A_excl)){
            status_copy[i] <- "high_A"
          } 
      } else if (status[i]=="high_3"){
          if (random < risk_high_3_A){ 
            status_copy[i] <- "high_A"
        }
      } else if (status[i]=="high_A"){
          if (random < risk_high_A_B){
            status_copy[i] <- "high_B"
          }
      } else if (status[i]=="high_B"){
          if (random < risk_high_B_C){
            status_copy[i] <- "high_C"
          }
      } else if (status[i]=="high_C"){
          if (random < risk_high_C_D){
            status_copy[i] <- "high_D"
          }
      } else if (status[i]=="high_D"){
          if (random < risk_D_death){
            status_copy[i] <- "dead_AC"
          }
      }
    }
  }
  
  new_birth <- trunc(rnorm(1, risk_birth, 0.01) * 200000)
  status_copy <- c(status_copy, rep("low_nought", new_birth/2), rep("high_nought", new_birth/2))
  
  status <- status_copy
  
  return(status)
}

count_function <- function(status, options){
  counts <- c()
  for (i in options){
    counts <- c(counts, sum(status==i))
  }
  return(counts)
}
```

```{r}
status <- c(rep("low_nought", n_low), rep("high_nought", n_high))

count_table <- as.data.frame(t(c(n_low, n_high, rep(0, 16))))
names(count_table) <- options


for (i in 1:100){
  status <- change_status_function(status)
  counts <- count_function(status, options)
  count_table <- rbind(count_table, counts)
}
```
```{r}
count_table$alive <- apply(count_table[,c(1:16)], 1, sum)
count_table$dead <- count_table$dead_AC + count_table$dead_other
count_table$nought <- count_table$low_nought + count_table$high_nought
count_table$one <- count_table$low_1 + count_table$high_1
count_table$two <- count_table$low_2 + count_table$high_2
count_table$three <- count_table$low_3 + count_table$high_3
count_table$A <- count_table$low_A + count_table$high_A
count_table$B <- count_table$low_B + count_table$high_B
count_table$C <- count_table$low_C + count_table$high_C
count_table$D <- count_table$low_D + count_table$high_D



count_table_short <- count_table[, 17:28]

perc_table <- count_table_short[, 5:12]/count_table_short$alive * 100
perc_table$dead_AC <- count_table_short$dead_AC/count_table_short$dead * 100
perc_table$dead_other <- count_table_short$dead_other/count_table_short$dead * 100
perc_table$time <- seq(1, dim(perc_table)[1], 1)

```

```{r}
ggplot(perc_table) + 
          geom_line(aes(x=time, y=nought, color="nought")) +
          geom_line(aes(x=time, y=one, color="one")) +
          geom_line(aes(x=time, y=two, color="two")) +
          geom_line(aes(x=time, y=three, color="three")) +
          geom_line(aes(x=time, y=A, color="A")) +
          geom_line(aes(x=time, y=B, color="B")) +
          geom_line(aes(x=time, y=C, color="C")) +
          geom_line(aes(x=time, y=D, color="D"))

ggplot(perc_table) + 
          #geom_line(aes(x=time, y=nought, color="nought")) +
          geom_line(aes(x=time, y=one, color="one")) +
          geom_line(aes(x=time, y=two, color="two")) +
          geom_line(aes(x=time, y=three, color="three")) +
          geom_line(aes(x=time, y=A, color="A")) +
          geom_line(aes(x=time, y=B, color="B")) +
          geom_line(aes(x=time, y=C, color="C")) +
          geom_line(aes(x=time, y=D, color="D"))

ggplot(perc_table) + 
          #geom_line(aes(x=time, y=nought, color="nought")) +
          #geom_line(aes(x=time, y=one, color="one")) +
          #geom_line(aes(x=time, y=two, color="two")) +
          #geom_line(aes(x=time, y=three, color="three")) +
          geom_line(aes(x=time, y=A, color="A")) +
          geom_line(aes(x=time, y=B, color="B")) +
          geom_line(aes(x=time, y=C, color="C")) +
          geom_line(aes(x=time, y=D, color="D"))
```

